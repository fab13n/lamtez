type prod1 = Int_0_1 int*
type prod2 = Int_0_2 int * String_1_2 string
type prod3 = Int_0_3 int * String_1_3 string * Tez_2_3 tez
type prod4 = Int_0_4 int * String_1_4 string * Tez_2_4 tez * Nat_3_4 nat
type prod5 = Int_0_5 int * String_1_5 string * Tez_2_5 tez * Nat_3_5 nat * Bool_4_5 bool

@x: prod5

\(param: unit):

  let x1 = { Int_0_1: @x.Int_0_5 - 1
           } in
  let x2 = { Int_0_2: @x.Int_0_5 - 1
           , String_1_2: @x.String_1_5^"!"
           } in
  let x3 = { Int_0_3: @x.Int_0_5 - 1
           , String_1_3: @x.String_1_5^"!"
           , Tez_2_3: @x.Tez_2_5 + tz1.50
           } in
  let x4 = { Int_0_4: @x.Int_0_5 - 1
           , String_1_4: @x.String_1_5^"!"
           , Tez_2_4: @x.Tez_2_5 + tz1.50
           , Nat_3_4: @x.Nat_3_5 + 1
           } in
  let x5 = { Int_0_5: @x.Int_0_5 - 1
           , String_1_5: @x.String_1_5^"!"
           , Tez_2_5: @x.Tez_2_5 + tz1.50
           , Nat_3_5: @x.Nat_3_5 + 1
           , Bool_4_5: @x.Bool_4_5 or False
           } in

  (x1, x2, x3, x4, x5)
