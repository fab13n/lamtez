type sum1 = Int_0_1 int+
type sum2 = Int_0_2 int + String_1_2 string
type sum3 = Int_0_3 int + String_1_3 string + Tez_2_3 tez
type sum4 = Int_0_4 int + String_1_4 string + Tez_2_4 tez + Nat_3_4 nat
type sum5 = Int_0_5 int + String_1_5 string + Tez_2_5 tez + Nat_3_5 nat + Bool_4_5 bool

@string :: string
@tez    :: tez
@nat    :: nat
@bool   :: bool

\param :: unit:
  let x1 = ( case Int_0_1 +1
           | Int_0_1 x: Int_0_1 (x - @nat)
           );
  let x2 = ( case Int_0_2 +1
           | Int_0_2 x: Int_0_2 (x - @nat)
           | String_1_2 x: String_1_2 (x^@string)
           );
  let x3 = ( case Int_0_3 +1
           | Int_0_3 x: Int_0_3 (x - 1)
           | String_1_3 x: String_1_3 (x^"!")
           | Tez_2_3 x: Tez_2_3 (x + tz1.50)
           );
  let x4 = ( case Int_0_4 +1
           | Int_0_4 x: Int_0_4 (x - 1)
           | String_1_4 x: String_1_4 (x^"!")
           | Tez_2_4 x: Tez_2_4 (x + @tez)
           | Nat_3_4 x: Nat_3_4 (x + 1)
           );
  let x5 = ( case Int_0_5 +1
           | Int_0_5 x: Int_0_5 (x - 1)
           | String_1_5 x: String_1_5 (x^"!")
           | Tez_2_5 x: Tez_2_5 (x + tz1.50)
           | Nat_3_5 x: Nat_3_5 (x + 1)
           | Bool_4_5 x: Bool_4_5 (x || False && @bool)
           );

  (x1, x2, x3, x4, x5)