type withdrawal = Key: key * Amount: tez * Signature: signature
type operation = Deposit key + Withdrawal withdrawal

@accounts :: map key tez

\(operation::operation):
( operation ?
| Deposit key:
  let new_balance = ( map-get key @accounts ?
                    | None: self-amount  # Create new account
                    | Some balance: self-amount + balance  # update existing account
                    );
  @accounts <- map-update key (Some new_balance) @accounts;
  ()
| Withdrawal w:
  ( crypto-check w.Key w.Signature (crypto-hash w.Amount) ?
  | False: fail  # withdrawal denied (authentication failed)
  | True: ( map-get w.Key @accounts ?
          | None: fail  # withdrawal denied (no such account)
          | Some balance:
            ( balance >= w.Amount ?
            | False: fail  # withdrawal denied (insufficient funds)
            | True: let new_balance = ( balance = w.Amount ?
			                          | True: None  # Delete empty account
									  | False: Some (balance - w.Amount)  # update account
									  );
					@accounts <- map-update w.Key new_balance @accounts;
					()
            )
          )
  )
)
