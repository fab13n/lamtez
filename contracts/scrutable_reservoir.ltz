@status                 :: string
@time_threshold         :: time
@amount_threshold       :: tez
@when_threshold_reached :: account
@when_too_late          :: account
@broker                 :: account
@broker_fee             :: tez

\(p :: unit):

( if
### If the contract is realized, don't call it again ###
| @status != "open": fail

### Open after timeout: let's cancel it, pay broker, send the rest to when_too_late ###
| self-now >= @time_threshold:
    @status <- "timeout";
    let available = self-balance - tz1.00;
    let fee = (if available < @broker_fee: available | else: @broker_fee);
    contract-call @broker () fee;
    contract-call @when_too_late () (self-balance - tz1.00)

### Money threshold reached before timeout ###
| self-balance >= tz1.00 + @broker_fee + @amount_threshold:
    @status <- "success";
    contract-call @broker () @broker_fee;
    contract-call @when_threshold_reached () @amount_threshold

### Before timeout, not enough money yet, wait ###
| else:
    ()
)